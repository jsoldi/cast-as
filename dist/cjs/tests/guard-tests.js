"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("../lib/index.js");
const tester_js_1 = require("./tester.js");
(0, tester_js_1.testEq)('Guard.every returns true for empty array', index_js_1.Guard.every().guard(null), true);
(0, tester_js_1.testEq)('Guard.every returns true for single good', index_js_1.Guard.every(index_js_1.Guard.isString).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.every returns false for single bad', index_js_1.Guard.every(index_js_1.Guard.isString).guard(12.3), false);
(0, tester_js_1.testEq)('Guard.every returns true for two good', index_js_1.Guard.every(index_js_1.Guard.isString, index_js_1.Guard.isSomething).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.every returns false for two bad', index_js_1.Guard.every(index_js_1.Guard.isNumber, index_js_1.Guard.isNothing).guard('hey'), false);
(0, tester_js_1.testEq)('Guard.every returns false for one bad (1)', index_js_1.Guard.every(index_js_1.Guard.isNothing, index_js_1.Guard.isString).guard('hey'), false);
(0, tester_js_1.testEq)('Guard.every returns false for one bad (2)', index_js_1.Guard.every(index_js_1.Guard.isString, index_js_1.Guard.isNothing).guard('hey'), false);
(0, tester_js_1.testEq)('Guard.some returns false for empty array', index_js_1.Guard.some().guard(null), false);
(0, tester_js_1.testEq)('Guard.some returns true for single good', index_js_1.Guard.some(index_js_1.Guard.isString).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.some returns false for single bad', index_js_1.Guard.some(index_js_1.Guard.isString).guard(12.3), false);
(0, tester_js_1.testEq)('Guard.some returns true for two good', index_js_1.Guard.some(index_js_1.Guard.isString, index_js_1.Guard.isSomething).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.some returns false for two bad', index_js_1.Guard.some(index_js_1.Guard.isNumber, index_js_1.Guard.isNothing).guard('hey'), false);
(0, tester_js_1.testEq)('Guard.some returns true for one good (1)', index_js_1.Guard.some(index_js_1.Guard.isString, index_js_1.Guard.isNothing).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.some returns true for one good (2)', index_js_1.Guard.some(index_js_1.Guard.isNothing, index_js_1.Guard.isString).guard('hey'), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for null', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isUnknown).guard(null), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for undefined', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isUnknown).guard(undefined), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for primitive', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isUnknown).guard(123), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true for empty object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isNever).guard({}), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true for empty array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isNever).guard([]), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true single good array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard(['hey']), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for single bad array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard([123]), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true for two good array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard(['hey', 'some']), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for two bad array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard([123, 456]), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for one bad (1) array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard([32, 'hey']), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for one bad (2) array', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard(['hey', 32]), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true for single good object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 'some' }), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for single bad object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 123 }), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns true for two good object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 'some', some: 'hey' }), true);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for two bad object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 123, some: 456 }), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for one bad (1) object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 32, some: 'hey' }), false);
(0, tester_js_1.testEq)('Guard.isCollectionOf returns false for one bad (2) object', index_js_1.Guard.isCollectionOf(index_js_1.Guard.isString).guard({ hey: 'hey', some: 32 }), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for null', index_js_1.Guard.isArrayOf(index_js_1.Guard.isUnknown).guard(null), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for undefined', index_js_1.Guard.isArrayOf(index_js_1.Guard.isUnknown).guard(undefined), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for primitive', index_js_1.Guard.isArrayOf(index_js_1.Guard.isUnknown).guard(123), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for object', index_js_1.Guard.isArrayOf(index_js_1.Guard.isNever).guard({}), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns true for array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isNever).guard([]), true);
(0, tester_js_1.testEq)('Guard.isArrayOf returns true single good array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard(['hey']), true);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for single bad array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard([123]), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns true for two good array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard(['hey', 'some']), true);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for two bad array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard([123, 456]), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for one bad (1) array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard([32, 'hey']), false);
(0, tester_js_1.testEq)('Guard.isArrayOf returns false for one bad (2) array', index_js_1.Guard.isArrayOf(index_js_1.Guard.isString).guard(['hey', 32]), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for null', index_js_1.Guard.isStructOf(index_js_1.Guard.isUnknown).guard(null), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for undefined', index_js_1.Guard.isStructOf(index_js_1.Guard.isUnknown).guard(undefined), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for primitive', index_js_1.Guard.isStructOf(index_js_1.Guard.isUnknown).guard(123), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns true for object', index_js_1.Guard.isStructOf(index_js_1.Guard.isNever).guard({}), true);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for array', index_js_1.Guard.isStructOf(index_js_1.Guard.isNever).guard([]), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns true single good object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 'some' }), true);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for single bad object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 123 }), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns true for two good object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 'some', some: 'hey' }), true);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for two bad object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 123, some: 456 }), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for one bad (1) object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 32, some: 'hey' }), false);
(0, tester_js_1.testEq)('Guard.isStructOf returns false for one bad (2) object', index_js_1.Guard.isStructOf(index_js_1.Guard.isString).guard({ hey: 'hey', some: 32 }), false);
const strict = { keyGuarding: 'strict' };
const loose = { keyGuarding: 'loose' };
(0, tester_js_1.testEq)('Guard.isCollectionLike strict works for tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(strict).guard(['hey', 23]), true);
(0, tester_js_1.testEq)('Guard.isCollectionLike strict fails for smaller tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(strict).guard(['hey']), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike strict fails for larger tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(strict).guard(['hey', 23, 1n]), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose works for tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(loose).guard(['hey', 23]), true);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose fails for smaller tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(loose).guard(['hey']), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose works for larger tuple', index_js_1.Guard.is([index_js_1.Guard.isString, index_js_1.Guard.isNumber]).config(loose).guard(['hey', 23, 1n]), true);
(0, tester_js_1.testEq)('Guard.isCollectionLike strict works for object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(strict).guard({ a: 'hey', b: 9 }), true);
(0, tester_js_1.testEq)('Guard.isCollectionLike strict fails for smaller object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(strict).guard({ a: 'hey' }), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike strict fails for larger object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(strict).guard({ a: 'hey', b: 9, c: 1n }), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose works for object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(loose).guard({ a: 'hey', b: 9 }), true);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose fails for smaller object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(loose).guard({ a: 'hey' }), false);
(0, tester_js_1.testEq)('Guard.isCollectionLike loose works for larger object', index_js_1.Guard.is({ a: index_js_1.Guard.isString, b: index_js_1.Guard.isNumber }).config(loose).guard({ a: 'hey', b: 9, c: 1n }), true);
(0, tester_js_1.testEq)('Guard.isArrayOf uses default settings', index_js_1.Guard.isArrayOf(index_js_1.Guard.is([index_js_1.Guard.isNumber])).guard([[10], [20], [30, 40]]), true);
(0, tester_js_1.testEq)('Guard.isArrayOf propagates settings', index_js_1.Guard.isArrayOf(index_js_1.Guard.is([index_js_1.Guard.isNumber])).config(strict).guard([[10], [20], [30, 40]]), false);
//# sourceMappingURL=guard-tests.js.map